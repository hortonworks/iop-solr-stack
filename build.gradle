/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "com.netflix.nebula:gradle-ospackage-plugin:4.4.0"
    classpath 'de.undercouch:gradle-download-task:3.2.0'
  }
}

apply plugin: 'idea'
apply plugin: 'distribution'
apply plugin: 'java'
apply plugin: "nebula.ospackage"

ext.src = 'src/main/resources/'
ext.repostemplate = 'src/main/template/repos/repoinfo.xml'
ext.reposinfo = 'hdp-addon-services/SOLR/6.3.0/repos/'
ext.distPackageName="${packageName}"

task wrapper(type: Wrapper) {
  gradleVersion = '3.2'
}

distributions {
  main {
    contents {
      baseName = packageName
      from { src }

      from { src + 'mpack.json' }
      filter { String line ->
        line.replace("{VERSION}", "${version}")
      }

      into(reposinfo) {
        from { repostemplate }
        filter { String line ->
          line.replace("{REPOID}", "${repoid}")
        }
      }
    }
  }
}

distTar {
  destinationDir = file(buildDir)
  appendix = 'mpack'
  compression = Compression.GZIP
  extension = 'tar.gz'
}

task buildTar(dependsOn: [clean, distTar]) {
}

import de.undercouch.gradle.tasks.download.Download

task downloadSolr(type: Download, dependsOn: buildTar) {
  src "${solrTar}"
  dest buildDir
  overwrite true
}

task untarSolr(type:Copy, dependsOn: [downloadSolr]){
  from tarTree(resources.gzip("${buildDir}/solr-${solrVersion}.tgz"))
  into buildDir
}

task rpm(type: Rpm, dependsOn: [untarSolr]) {
  packageName = "${distPackageName}"
  version = "${solrVersion}"
  release = "${stackVersion}"
  into "${stackFolder}/${stackVersion}"
  os = LINUX
  user = 'root'
  permissionGroup = 'root'
  from("${buildDir}/solr-${solrVersion}/") {
    into "${distPackageName}"
  }
  directory("/var/log/${distPackageName}", 644)
  directory("/var/run/${distPackageName}", 644)
}

task deb(type: Deb, dependsOn: [untarSolr]) {
  packageName = "${distPackageName}"
  version = "${solrVersion}"
  release = "${stackVersion}"
  os = LINUX
  user = 'root'
  permissionGroup = 'root'
  into "${stackFolder}/${stackVersion}"
  from("${buildDir}/solr-${solrVersion}/") {
    into "${distPackageName}"
  }
  directory("/var/log/${distPackageName}", 644)
  directory("/var/run/${distPackageName}", 644)
}
